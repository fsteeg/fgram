<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping table version: 28-February-2003 --><HTML><HEAD><META name="dc.date" content="2007-07-10T23:26:15+02:00" ><META name="generator" content="Adobe Acrobat Exchange-Pro 8.0" ></HEAD><BODY bgcolor=white text=black link=blue vlink=purple alink=fushia ><P  align="justify"><FONT size="+1" color="#000000"></B>Pape<FONT size="+1" color="#000000"></B>r for Advances in FDG based on a Poster presented at ICFG12 </P><P  align="center">Computational Representation of Underlying Structures and 
Lexical Entries using Domain-Speci&#64257;c Languages 
</P><P  align="center">Fabian Steeg, Christoph Benden, Paul O. Samuelsdor&#64256;<Sup><Sup><FONT size="+1">&lowast; </Sup></Sup></P><DIV class="Part" ><H3  align="center">Jul<FONT size="+1">y 10, 2007 </H3><P  align="justify"><FONT size="+1">Thi<FONT size="+1">s paper describes a modular system for generating sentences from formal de&#64257;nitions of underlying structures and lexical entries represented using domain-speci&#64257;c languages. The system is implemented using Prolog, Java and the ANTLR parser generator. It could be used in the context of a larger NLP system and as a tool for formal notation in linguistic description in FG and FDG. </P><P  align="center">FDG ; NLP ; Parsing ; ANTLR ; DSL ; Java ; Prolog </P><DIV class="Sect" ><H3  align="justify"><FONT size="+1">1 <FONT size="+1">Motivation and Overview </H3><P  align="justify"><FONT size="+1">Thi<FONT size="+1">s paper describes a modular implementation of a system for generating sentences, using domain-speci&#64257;c languages (DSL; see section 3) for the formal representation of underlying structures and lexical entries. The DSL implemented for underlying structures is based on representations in Functional Grammar (FG; Dik 1997). Starting with a fully speci&#64257;ed underlying structure instead of selecting lexical entries as the &#64257;rst step corresponds to the shift of Functional Discourse Grammar (FDG) to a top-down organization (Hengeveld & Mackenzie 2006). Through its modular architecture the system can be extended for formal representations in FDG. The idea of creating a computational implementation of FG and FDG mechanisms, to &ldquo;build a model of the natural language user&rdquo; (Dik 1997, 1) is central to these frameworks and a valuable evaluation tool for linguistic theories in general, since &ldquo;linguistics may learn from being applied&rdquo; (Bakker 1994, 4). Therefore our </P><P  align="justify"><FONT size="+1">&lowast; </P><P  align="justify"><FONT size="+1">Departmen<FONT size="+1">t of Linguistics, University of Cologne, Germany, http://www.uni-koeln.de/phil-fak/i&#64258;, fsteeg@spinfo.uni-koeln.de, cbenden@spinfo.uni-koeln.de, paul-o.samuelsdor&#64256;@uni-koeln.de </P><IMG align="" width="567" height="424" src="Bilder/fdg-paper_img_0.jpg" ><P  align="center"><FONT size="+1">Figur<FONT size="+1">e 1: System Architecture </P><P  align="justify">implementation can be used to evaluate and improve FDG with respect to theoretical issues in language generation. FDG demands &ldquo;formal rigor&rdquo; (Hengeveld & Mackenzie 2006, 668) and accordingly should be tested formally. Our implementation can therefore be used to evaluate and improve representational aspects of FDG. The expression rules and the lexicon are based on a revised and extended version of the implementation described in Samuelsdor&#64256; (1989). By means of its modular architecture the program could act as the language generation component in a larger natural language processing (NLP) system or as a tool for formal notation in linguistic description. </P></DIV><DIV class="Sect" ><H3  align="justify"><FONT size="+1">2 <FONT size="+1">System Architecture </H3><P  align="justify"><FONT size="+1">Th<FONT size="+1">e system consists of individual, exchangeable modules for creating an underlying structure, processing that input and generating a linguistic expression from the input (see </P><IMG align="" width="576" height="111" src="Bilder/fdg-paper_img_1.jpg" ><P  align="center">Figure 2: Screenshot of the console-based implementation 
</P><IMG align="" width="576" height="185" src="Bilder/fdg-paper_img_2.jpg" ><P  align="center">Figure 3: Screenshot of the Web-based implementation </P><P  align="justify">Fig. 1). In the input module an underlying structure is created, edited and evaluated. Upon evaluation the input is sent to the processing module, which communicates with the grammar module. When the generation is done, the graphical user interface (GUI) displays either the result of the evaluation, namely the linguistic expression generated from the input, or an error message. The system architecture can be characterized as a Model-View-Controller (MVC) or three-tier architecture. Such a modular approach has two main advantages: First, modules can be exchanged; for instance the input module is implemented both as a console application (cf. Fig. 2) and as a web-based user interface with the actual processing happening on a server (implemented using Java Server Pages on a Tomcat servlet container, cf. Fig. 3). Second, by using a de&#64257;ned input format, our system can be combined with other NLP components and be reused in new contexts. </P></DIV><DIV class="Sect" ><H3  align="justify"><FONT size="+1">3 <FONT size="+1">Domain-Speci&#64257;c Languages </H3><P  align="justify"><FONT size="+1">Th<FONT size="+1">e usage of languages which are tailored for a speci&#64257;c domain (domain-speci&#64257;c languages, DSL) has a long tradition in computing and has been acknowledged as a best practice in </P><IMG align="" width="567" height="161" src="Bilder/fdg-paper_img_3.jpg" ><P  align="center">Figure 4: Parser overview 
</P><P >(Past e: (d1x:&rsquo;man&rsquo;[N]: </P><P >(Past Pf e:&rsquo;give&rsquo;[V] 
(d1x:&rsquo;mary&rsquo;[N])Ag 
(dmx:&rsquo;book&rsquo;[N]:&rsquo;old&rsquo;[A])Go 
(x:&rsquo;man&rsquo;[N])RecSubj 
</P><P >) 
) 
(d1x:&rsquo;john&rsquo;[N])0 
</P><P >) </P><P >Figure 5: A nested underlying structure based on Dik (1997), which is parsable by the generated ANTLRv2 parser (represents John is the man who was given the book by Mary) </P><P >recent years (cf. Hunt & Thomas 1999, Ch. 12 and Parr 2007). Our system uses Java as a general-purpose language, Prolog as a DSL for lexical entries and expression rules, and a self-de&#64257;ned DSL for describing underlying structures, implemented using ANTLR, a tool for de&#64257;ning and processing domain-speci&#64257;c languages (Parr 2007). While e.g. in the domain of banking a DSL might describe credit rules, a linguist working with a model like FDG uses a DSL for linguistic description, e.g. for formal notation of underlying structures. With ANTLR, the form of the DSL is de&#64257;ned in EBNF notation (cf. Fig. 8), based on which a Java parser that can process the DSL is automatically generated, allowing for interaction with the abundant supply of libraries available in Java (cf. Fig. 4). </P><IMG align="" width="367" height="227" src="Bilder/fdg-paper_img_4.jpg" ><P  align="justify">Figure 6: Internal representation of an underlying structure: a tree of Java objects (in UML notation) </P></DIV><DIV class="Sect" ><H3  align="justify"><FONT size="+1">4 <FONT size="+1">Underlying Structures </H3><P  align="justify"><FONT size="+1">Th<FONT size="+1">e processing module&rsquo;s input format is a representation of the linguistic expression to be generated; its form is based on the representation of underlying structures given in Dik (1997). The processing module parses the input entered by the user (or potentially coming from a di&#64256;erent source) and creates an internal representation (see Fig. 6) which is then converted into the output format of the processing module, a Prolog representation of the input, which is used by the grammar module. </P><P  align="justify">Figures 5 and 7 show the structural similarity of underlying structures in FG and FDG; both representations are nested parentheses, which can also be represented as trees (cf. Fig. 6). Since these representations can be described and processed with the same mechanisms, and representations on all levels of FDG have a common scheme (Hengeveld & Mackenzie 2006, 671), support for FDG representations is easy to add by supplying ANTLR de&#64257;nitions for representations on the individual levels in FDG, like the Interpersonal Level (IL) and the Representational Level (RL, cf. Fig. 7, 8 and 9). Such an ANTLR grammar de&#64257;nition alone provides a validator for the formal structure of IL and RL representations. With grammar &#64257;les for the IL and the RL implemented and having an internal representation of the input, alternative processing is possible too, e.g. output of typeset representations of the underlying structures with or without indentation. </P><P >(p1:[ (Past e1:[ </P><P >(f1:tek[ (x1:im(x1))Ag (x2:naif(x2))Inst </P><P >](f1)) </P><P >(f2:kot[ (x1:im(x1))Ag (x3:mi(x3))Pat </P><P  align="">](f2)) ](e1)) ](p1)) </P><P >Figure 7: Underlying structure on the RL in FDG (Jamaican Creole: Im tek naif kot mi, &rsquo;He cut me with a knife&rsquo;), which is parsable by the parser generated from the rules in Fig. 8 </P><TABLE  align="center" border=0 cellspacing=0 cellpadding=2><TR  ><TH  align="left" width="73"  valign="top" height="15" >content </TH><TH  colspan=2 align="right" width="23"  valign="top" height="15" >: </TH><TH  align="center" width="31"  valign="top" height="15" >&rsquo;(&rsquo; </TH><TH  colspan=3 align="left" width="77"  valign="top" height="15" >OPERATOR? </TH><TH  colspan=2 align="center" width="30"  valign="top" height="15" >&rsquo;p&rsquo; </TH><TH  align="center" width="15"  valign="top" height="15" >X </TH><TH  align="center" width="15"  valign="top" height="15" >( </TH><TH  align="center" width="31"  valign="top" height="15" >&rsquo;:&rsquo; </TH><TH  align="left" width="38"  valign="top" height="15" >head </TH><TH  colspan=2 align="center" width="61"  valign="top" height="15" >&rsquo;(&rsquo; &rsquo;p&rsquo; </TH><TH  align="center" width="15"  valign="top" height="15" >X </TH><TH  align="center" width="84"  valign="top" height="15" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TH><TH  align="left" width="76"  valign="top" height="15" >FUNCTION? </TH><TH  align="left" width="11"  valign="top" height="15" >; </TH></TR><TR  ><TD   align="left" width="73"  valign="middle" height="18" >soa </TD><TD   colspan=2 align="right" width="23"  valign="middle" height="18" >: </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   colspan=3 align="left" width="77"  valign="top" height="18" >OPERATOR? </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" >&rsquo;e&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="center" width="15"  valign="top" height="18" >( </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;:&rsquo; </TD><TD   align="left" width="38"  valign="top" height="18" >head </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;e&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="left" width="84"  valign="top" height="18" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TD><TD   align="left" width="76"  valign="top" height="18" >FUNCTION? </TD><TD   align="right" width="11"  valign="middle" height="18" >; </TD></TR><TR  ><TD   align="left" width="73"  valign="middle" height="18" >property </TD><TD   colspan=2 align="right" width="23"  valign="middle" height="18" >: </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   colspan=3 align="left" width="77"  valign="top" height="18" >OPERATOR? </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" >&rsquo;f&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="center" width="15"  valign="top" height="18" >( </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;:&rsquo; </TD><TD   align="left" width="38"  valign="top" height="18" >head </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;f&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="left" width="84"  valign="top" height="18" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TD><TD   align="left" width="76"  valign="top" height="18" >FUNCTION? </TD><TD   align="right" width="11"  valign="middle" height="18" >; </TD></TR><TR  ><TD   colspan=2 align="left" width="80"  valign="top" height="18" >individual </TD><TD   align="right" width="15"  valign="middle" height="18" >: </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   colspan=3 align="left" width="77"  valign="top" height="18" >OPERATOR? </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" >&rsquo;x&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="center" width="15"  valign="top" height="18" >( </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;:&rsquo; </TD><TD   align="left" width="38"  valign="top" height="18" >head </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;x&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="left" width="84"  valign="top" height="18" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TD><TD   align="left" width="76"  valign="top" height="18" >FUNCTION? </TD><TD   align="right" width="11"  valign="middle" height="18" >; </TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" >location </TD><TD   colspan=2 align="right" width="23"  valign="middle" height="18" >: </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   colspan=3 align="left" width="77"  valign="top" height="18" >OPERATOR? </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" >&rsquo;l&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="center" width="15"  valign="top" height="18" >( </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;:&rsquo; </TD><TD   align="left" width="38"  valign="top" height="18" >head </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;l&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="left" width="84"  valign="top" height="18" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TD><TD   align="left" width="76"  valign="top" height="18" >FUNCTION? </TD><TD   align="right" width="11"  valign="middle" height="18" >; </TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" >time </TD><TD   colspan=2 align="right" width="23"  valign="middle" height="18" >: </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   colspan=3 align="left" width="77"  valign="top" height="18" >OPERATOR? </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" >&rsquo;t&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="center" width="15"  valign="top" height="18" >( </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;:&rsquo; </TD><TD   align="left" width="38"  valign="top" height="18" >head </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;(&rsquo; </TD><TD   align="center" width="31"  valign="top" height="18" >&rsquo;t&rsquo; </TD><TD   align="center" width="15"  valign="top" height="18" >X </TD><TD   align="left" width="84"  valign="top" height="18" >&rsquo;)&rsquo; )* &rsquo;)&rsquo; </TD><TD   align="left" width="76"  valign="top" height="18" >FUNCTION? </TD><TD   align="right" width="11"  valign="middle" height="18" >; </TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" >head </TD><TD   colspan=2 align="right" width="23"  valign="middle" height="18" >: </TD><TD   colspan=3 align="center" width="54"  valign="top" height="18" >LEMMA? </TD><TD   align="left" width="54"  valign="top" height="18" >( &rsquo;[&rsquo; </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="left" width="38"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="left" width="84"  valign="top" height="18" ></TD><TD   align="left" width="76"  valign="top" height="18" ></TD><TD   align="right" width="11"  valign="top" height="18" ></TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" ></TD><TD   colspan=2 align="right" width="23"  valign="top" height="18" >( </TD><TD   colspan=4 align="center" width="107"  valign="middle" height="18" >soa </TD><TD   colspan=2 align="left" width="30"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="38"  valign="top" height="18" ></TD><TD   align="left" width="31"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="84"  valign="top" height="18" ></TD><TD   align="left" width="76"  valign="top" height="18" ></TD><TD   align="left" width="11"  valign="top" height="18" ></TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" ></TD><TD   colspan=6 align="right" width="130"  valign="top" height="18" >| property </TD><TD   colspan=2 align="center" width="30"  valign="top" height="18" ></TD><TD   align="left" width="15"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="38"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="left" width="31"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="84"  valign="top" height="18" ></TD><TD   align="center" width="76"  valign="top" height="18" ></TD><TD   align="left" width="11"  valign="top" height="18" ></TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" ></TD><TD   colspan=2 align="right" width="23"  valign="top" height="18" >| </TD><TD   colspan=4 align="center" width="107"  valign="top" height="18" >individual </TD><TD   colspan=2 align="left" width="30"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="38"  valign="top" height="18" ></TD><TD   align="left" width="31"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="84"  valign="top" height="18" ></TD><TD   align="left" width="76"  valign="top" height="18" ></TD><TD   align="left" width="11"  valign="top" height="18" ></TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="18" ></TD><TD   colspan=2 align="right" width="23"  valign="top" height="18" >| </TD><TD   colspan=4 align="center" width="107"  valign="top" height="18" >location </TD><TD   colspan=2 align="left" width="30"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="38"  valign="top" height="18" ></TD><TD   align="left" width="31"  valign="top" height="18" ></TD><TD   align="center" width="31"  valign="top" height="18" ></TD><TD   align="center" width="15"  valign="top" height="18" ></TD><TD   align="center" width="84"  valign="top" height="18" ></TD><TD   align="left" width="76"  valign="top" height="18" ></TD><TD   align="left" width="11"  valign="top" height="18" ></TD></TR><TR  ><TD   align="left" width="73"  valign="top" height="15" ></TD><TD   colspan=2 align="right" width="23"  valign="middle" height="15" >| </TD><TD   colspan=2 align="center" width="38"  valign="middle" height="15" >time </TD><TD   colspan=2 align="left" width="69"  valign="middle" height="15" >)* &rsquo;]&rsquo; ) </TD><TD   align="center" width="15"  valign="middle" height="15" >? </TD><TD   align="center" width="15"  valign="middle" height="15" >; </TD><TD   align="center" width="15"  valign="top" height="15" ></TD><TD   align="center" width="15"  valign="top" height="15" ></TD><TD   align="left" width="31"  valign="top" height="15" ></TD><TD   align="center" width="38"  valign="top" height="15" ></TD><TD   align="center" width="31"  valign="top" height="15" ></TD><TD   align="center" width="31"  valign="top" height="15" ></TD><TD   align="left" width="15"  valign="top" height="15" ></TD><TD   align="left" width="84"  valign="top" height="15" ></TD><TD   align="right" width="76"  valign="top" height="15" ></TD><TD   width="11"  valign="top" height="15" ></TD></TR></TABLE><P  align="center">Figure 8: ANTLR v3 parser rules for structures on the RL 
</P><IMG align="" width="567" height="213" src="Bilder/fdg-paper_img_5.jpg" ><P  align="center">Figure 9: Part of the parse tree for the expression in Fig. 7 
</P><P >verb( give, action, [gave, given], [ </P><P >[agent, animate, X1], 
[goal, any, X2], 
[recipient, animate, X3] 
</P><P  align="">], Sat ). </P><P  align="center">Figure 10: Ditransitive verb as a Prolog fact in the lexicon </P></DIV><DIV class="Sect" ><H3 ><FONT size="+1">5 <FONT size="+1">Lexical Entries </H3><P ><FONT size="+1">I<FONT size="+1">n the grammar module the Prolog representation of the input generated by the processing module is used to generate a linguistic expression. Prolog was developed as a programming language for linguists and therefore o&#64256;ers convenient notation and processing mechanisms, </P><P >e.g. lexical entries can be stored directly as Prolog facts (see Fig. 10). Prolog also has a particular strong standing as an implementation language for FG (e.g. Samuelsdor&#64256; 1989; Dik 1992). By restricting the usage of Prolog to lexical entries and expression rules and combining it with other languages, instead of using it as a general-purpose programming language for the entire program, we use Prolog as a DSL in its original domain. The expression rules and the lexicon are based on a revised and extended version of the implementation described in Samuelsdor&#64256; (1989). To make the implementation work as a module in the described system, the user dialog of the original version (in which the underlying structure is built step by step) was replaced by an immediate processing of the entire input representing the linguistic expression to be generated. The user dialog is therefore replaced by the formal representation, which is created in the input module and converted into a Prolog representation by the processing module. This resembles the shift to a top-down organization in FDG (Hengeveld & Mackenzie 2006), where the conceptualization is the &#64257;rst step, not the selection of lexical elements, as it was in FG and in our original implementation. </P></DIV><DIV class="Sect" ><H3  align="justify"><FONT size="+1">6 <FONT size="+1">Conclusion </H3><P  align="justify"><FONT size="+1">W<FONT size="+1">e described a modular implementation of a language generation system, representing underlying structures and lexical entries using domain-speci&#64257;c languages. The system makes use of an input format based on Dik (1997) and consists of modules implemented in Java, Prolog and ANTLR, making it easy to extend for FDG representations. As all structures used in FDG as well as the lexical entries as Prolog facts have a common tree structure, a uni&#64257;ed implementation using ANTLR to de&#64257;ne and process all these structures is feasible and would allow further processing in all the target languages supported by ANTLR (currently Java, C, C++, C#, Objective-C, Python and Ruby). The system can be used to evaluate and improve FDG with respect to theoretical and representational issues; by means of its modular architecture it could act as the language generation component in a larger NLP system or as a tool for formal notation in linguistic description. The implementation and infrastructure for collaborative development is available at http://fgram.sourceforge.net. </P></DIV><DIV class="Sect" ><H3  align="justify"><FONT size="+1">Reference<FONT size="+1">s </H3><P  align="justify"><FONT size="+1">Bakker<FONT size="+1">, D.: 1994, Formal and Computational Aspects of Functional Grammar and Language Typology, Ph.D. thesis, Universiteit van Amsterdam. </P><P  align="justify">Dik, S. C.: 1992, Functional Grammar in Prolog: an Integrated Implementation for English, French and Dutch, Mouton de Gruyter, Berlin, New York. </P><P  align="justify">Dik, S. C.: 1997, The Theory of Functional Grammar. Part 1: The Structure of the Clause (edited by Kees Hengeveld), second edn., Mouton de Gruyter, Berlin. </P><P  align="justify">Hengeveld, K. & L. J. Mackenzie: 2006, &lsquo;Functional Discourse Grammar&rsquo;, in </P><P  align="justify">K. Brown (ed.), Encyclopedia of Language and Linguistics, second edn., Elsevier, Oxford, pp. 668&ndash;676. </P><P  align="justify">Hunt, A. & D. Thomas: 1999, The Pragmatic Programmer: From Journeyman to Master, Addison-Wesley Professional. </P><P  align="justify">Parr, T.: 2007, The De&#64257;nitive ANTLR Reference: Building Domain-Speci&#64257;c Languages, The Pragmatic Bookshelf, Raleigh. </P><P  align="justify">Samuelsdorff, P. O.: 1989, &lsquo;Simulation of a Functional Grammar in Prolog&rsquo;, in J. H. Connolly & S. C. Dik (eds.), Functional Grammar and the Computer, De Gruyter, pp. 29&ndash;44. </P></DIV></DIV></BODY></HTML>